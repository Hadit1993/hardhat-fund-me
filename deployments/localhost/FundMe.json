{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MIN_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getowner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xeb30438c37b06f621793f7907cf2143657173e9a75a2b54a70641e33113b0749",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "971878",
    "logsBloom": "0x
    "blockHash": "0xeff5e91a20c5c474b26d7307e438ed55b690602a5eb095fd9f600e105fb4abbf",
    "transactionHash": "0xeb30438c37b06f621793f7907cf2143657173e9a75a2b54a70641e33113b0749",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "971878",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "cb8439ba01f9869267264a787f8747ec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MIN_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getowner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Hadi Tahmasbi\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Hadi Tahmasbi\\n * @notice This contract is to demo a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    uint256 public constant MIN_USD = 50 * 1e18;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    address private immutable i_owner;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        _;\\n        //the underscore bellow the require means that before executing the function checks the modifier;\\n        //if the requirement statement was after the underscore it means executes the function and at the end check the modifier;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    //What happens if someone sends this contract ETH without calling the func function?\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice This function funds this contract\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) > MIN_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] = msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (uint256 index = 0; index < s_funders.length; index++) {\\n            address funder = s_funders[index];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n\\n        //three methods for withdraw funds;\\n\\n        //  payable(msg.sender).transfer(address(this).balance);\\n        // if gas is more than 2300 it throws error\\n\\n        //  bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        //if gas is more than 2300 it returns false\\n\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (uint256 index = 0; index < funders.length; index++) {\\n            address funder = funders[index];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getowner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xdcc7631d66075d65134741468c25f7ce08301be7fcdc2b8db693a71ccdcb086c\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x1b44F3514812d835EB1BDB0acB33d3fA3351Ee43\\n        // );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUSD;\\n    }\\n}\\n\",\"keccak256\":\"0x53ca509ea9b2925eb1e6fe1344a11a19968ff1f63adfd04f4ed6430736ea592c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011b4380380620011b483398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b608051611034620001806000396000818161033e015281816105a80152818161079e015261087f01526110346000f3fe60806040526004361061007f5760003560e01c8063b60d42881161004e578063b60d428814610142578063be2693f01461014c578063d7b4750c14610156578063fe0174bd146101935761008e565b80630343fb2514610098578063213dbea2146100d55780633ccfd60b146101005780639e87a5cd146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a7a565b6102e6565b6040516100cc9190610ac0565b60405180910390f35b3480156100e157600080fd5b506100ea61032f565b6040516100f79190610ac0565b60405180910390f35b34801561010c57600080fd5b5061011561033c565b005b34801561012357600080fd5b5061012c61057c565b6040516101399190610b3a565b60405180910390f35b61014a6101be565b005b6101546105a6565b005b34801561016257600080fd5b5061017d60048036038101906101789190610b81565b610834565b60405161018a9190610bbd565b60405180910390f35b34801561019f57600080fd5b506101a861087b565b6040516101b59190610bbd565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108a390919063ffffffff16565b1161023d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023490610c35565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c1576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561046c5760008082815481106103e6576103e5610c55565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046490610cb3565b9150506103c4565b50600067ffffffffffffffff81111561048857610487610cfb565b5b6040519080825280602002602001820160405280156104b65781602001602082028036833780820191505090505b50600090805190602001906104cc929190610970565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104f390610d5b565b60006040518083038185875af1925050503d8060008114610530576040519150601f19603f3d011682016040523d82523d6000602084013e610535565b606091505b5050905080610579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057090610dbc565b60405180910390fd5b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461062b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106ae57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610664575b5050505050905060005b81518110156107395760008282815181106106d6576106d5610c55565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061073190610cb3565b9150506106b8565b50600067ffffffffffffffff81111561075557610754610cfb565b5b6040519080825280602002602001820160405280156107835781602001602082028036833780820191505090505b5060009080519060200190610799929190610970565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107e090610d5b565b60006040518083038185875af1925050503d806000811461081d576040519150601f19603f3d011682016040523d82523d6000602084013e610822565b606091505b505090508061083057600080fd5b5050565b600080828154811061084957610848610c55565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000806108af836108df565b90506000670de0b6b3a764000085836108c89190610ddc565b6108d29190610e4d565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109519190610f0b565b5050509150506402540be400816109689190610f86565b915050919050565b8280548282559060005260206000209081019282156109e9579160200282015b828111156109e85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610990565b5b5090506109f691906109fa565b5090565b5b80821115610a135760008160009055506001016109fb565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4782610a1c565b9050919050565b610a5781610a3c565b8114610a6257600080fd5b50565b600081359050610a7481610a4e565b92915050565b600060208284031215610a9057610a8f610a17565b5b6000610a9e84828501610a65565b91505092915050565b6000819050919050565b610aba81610aa7565b82525050565b6000602082019050610ad56000830184610ab1565b92915050565b6000819050919050565b6000610b00610afb610af684610a1c565b610adb565b610a1c565b9050919050565b6000610b1282610ae5565b9050919050565b6000610b2482610b07565b9050919050565b610b3481610b19565b82525050565b6000602082019050610b4f6000830184610b2b565b92915050565b610b5e81610aa7565b8114610b6957600080fd5b50565b600081359050610b7b81610b55565b92915050565b600060208284031215610b9757610b96610a17565b5b6000610ba584828501610b6c565b91505092915050565b610bb781610a3c565b82525050565b6000602082019050610bd26000830184610bae565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c1f601b83610bd8565b9150610c2a82610be9565b602082019050919050565b60006020820190508181036000830152610c4e81610c12565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cbe82610aa7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cf057610cef610c84565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d45600083610d2a565b9150610d5082610d35565b600082019050919050565b6000610d6682610d38565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610da6600b83610bd8565b9150610db182610d70565b602082019050919050565b60006020820190508181036000830152610dd581610d99565b9050919050565b6000610de782610aa7565b9150610df283610aa7565b9250828202610e0081610aa7565b91508282048414831517610e1757610e16610c84565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e5882610aa7565b9150610e6383610aa7565b925082610e7357610e72610e1e565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e9d81610e7e565b8114610ea857600080fd5b50565b600081519050610eba81610e94565b92915050565b6000819050919050565b610ed381610ec0565b8114610ede57600080fd5b50565b600081519050610ef081610eca565b92915050565b600081519050610f0581610b55565b92915050565b600080600080600060a08688031215610f2757610f26610a17565b5b6000610f3588828901610eab565b9550506020610f4688828901610ee1565b9450506040610f5788828901610ef6565b9350506060610f6888828901610ef6565b9250506080610f7988828901610eab565b9150509295509295909350565b6000610f9182610ec0565b9150610f9c83610ec0565b9250828202610faa81610ec0565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610fe257610fe1610c84565b5b8282058414831517610ff757610ff6610c84565b5b509291505056fea26469706673582212205106c313a926182fc69e8ff7952d0e6fa5288a1e63e6c4482ab253757ce7a5ed64736f6c63430008120033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063b60d42881161004e578063b60d428814610142578063be2693f01461014c578063d7b4750c14610156578063fe0174bd146101935761008e565b80630343fb2514610098578063213dbea2146100d55780633ccfd60b146101005780639e87a5cd146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610a7a565b6102e6565b6040516100cc9190610ac0565b60405180910390f35b3480156100e157600080fd5b506100ea61032f565b6040516100f79190610ac0565b60405180910390f35b34801561010c57600080fd5b5061011561033c565b005b34801561012357600080fd5b5061012c61057c565b6040516101399190610b3a565b60405180910390f35b61014a6101be565b005b6101546105a6565b005b34801561016257600080fd5b5061017d60048036038101906101789190610b81565b610834565b60405161018a9190610bbd565b60405180910390f35b34801561019f57600080fd5b506101a861087b565b6040516101b59190610bbd565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108a390919063ffffffff16565b1161023d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023490610c35565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c1576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561046c5760008082815481106103e6576103e5610c55565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046490610cb3565b9150506103c4565b50600067ffffffffffffffff81111561048857610487610cfb565b5b6040519080825280602002602001820160405280156104b65781602001602082028036833780820191505090505b50600090805190602001906104cc929190610970565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104f390610d5b565b60006040518083038185875af1925050503d8060008114610530576040519150601f19603f3d011682016040523d82523d6000602084013e610535565b606091505b5050905080610579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057090610dbc565b60405180910390fd5b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461062b576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106ae57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610664575b5050505050905060005b81518110156107395760008282815181106106d6576106d5610c55565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061073190610cb3565b9150506106b8565b50600067ffffffffffffffff81111561075557610754610cfb565b5b6040519080825280602002602001820160405280156107835781602001602082028036833780820191505090505b5060009080519060200190610799929190610970565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516107e090610d5b565b60006040518083038185875af1925050503d806000811461081d576040519150601f19603f3d011682016040523d82523d6000602084013e610822565b606091505b505090508061083057600080fd5b5050565b600080828154811061084957610848610c55565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000806108af836108df565b90506000670de0b6b3a764000085836108c89190610ddc565b6108d29190610e4d565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561092d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109519190610f0b565b5050509150506402540be400816109689190610f86565b915050919050565b8280548282559060005260206000209081019282156109e9579160200282015b828111156109e85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610990565b5b5090506109f691906109fa565b5090565b5b80821115610a135760008160009055506001016109fb565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4782610a1c565b9050919050565b610a5781610a3c565b8114610a6257600080fd5b50565b600081359050610a7481610a4e565b92915050565b600060208284031215610a9057610a8f610a17565b5b6000610a9e84828501610a65565b91505092915050565b6000819050919050565b610aba81610aa7565b82525050565b6000602082019050610ad56000830184610ab1565b92915050565b6000819050919050565b6000610b00610afb610af684610a1c565b610adb565b610a1c565b9050919050565b6000610b1282610ae5565b9050919050565b6000610b2482610b07565b9050919050565b610b3481610b19565b82525050565b6000602082019050610b4f6000830184610b2b565b92915050565b610b5e81610aa7565b8114610b6957600080fd5b50565b600081359050610b7b81610b55565b92915050565b600060208284031215610b9757610b96610a17565b5b6000610ba584828501610b6c565b91505092915050565b610bb781610a3c565b82525050565b6000602082019050610bd26000830184610bae565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c1f601b83610bd8565b9150610c2a82610be9565b602082019050919050565b60006020820190508181036000830152610c4e81610c12565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cbe82610aa7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cf057610cef610c84565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d45600083610d2a565b9150610d5082610d35565b600082019050919050565b6000610d6682610d38565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610da6600b83610bd8565b9150610db182610d70565b602082019050919050565b60006020820190508181036000830152610dd581610d99565b9050919050565b6000610de782610aa7565b9150610df283610aa7565b9250828202610e0081610aa7565b91508282048414831517610e1757610e16610c84565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e5882610aa7565b9150610e6383610aa7565b925082610e7357610e72610e1e565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e9d81610e7e565b8114610ea857600080fd5b50565b600081519050610eba81610e94565b92915050565b6000819050919050565b610ed381610ec0565b8114610ede57600080fd5b50565b600081519050610ef081610eca565b92915050565b600081519050610f0581610b55565b92915050565b600080600080600060a08688031215610f2757610f26610a17565b5b6000610f3588828901610eab565b9550506020610f4688828901610ee1565b9450506040610f5788828901610ef6565b9350506060610f6888828901610ef6565b9250506080610f7988828901610eab565b9150509295509295909350565b6000610f9182610ec0565b9150610f9c83610ec0565b9250828202610faa81610ec0565b91507f80000000000000000000000000000000000000000000000000000000000000008414600084121615610fe257610fe1610c84565b5b8282058414831517610ff757610ff6610c84565b5b509291505056fea26469706673582212205106c313a926182fc69e8ff7952d0e6fa5288a1e63e6c4482ab253757ce7a5ed64736f6c63430008120033",
  "devdoc": {
    "author": "Hadi Tahmasbi",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}